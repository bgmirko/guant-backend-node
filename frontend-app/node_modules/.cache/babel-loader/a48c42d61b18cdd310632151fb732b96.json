{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport * as ActionTypes from './actions';\nimport Api from '../../api/calls';\n\nfunction* getPerformers(action) {\n  try {\n    const graphqlQuery = {\n      query: `{\n            getPerformers{\n              performers{\n                _id,\n                name,\n                age,\n                category\n              }\n            }\n          }`\n    };\n    const result = yield call(Api.makePostRequest, graphqlQuery);\n\n    if (!result.data.hasOwnProperty('errors')) {\n      yield put(ActionTypes.getPerformersSuccess(result.data));\n    } else {\n      throw new Error(result.data.errors[0].message);\n    }\n  } catch (error) {\n    yield put(ActionTypes.getPerformersError(error));\n  }\n}\n\nfunction* addNewPerformer(action) {\n  try {\n    const graphqlQuery = {\n      query: `\n          mutation {\n            createPerformer(\n              name: \"${action.name}\", \n              age: \"${action.age}\",\n              category: \"${action.category}\"\n              )\n          {_id, name, age, category}\n        }`\n    };\n    const result = yield call(Api.makePostRequest, graphqlQuery);\n\n    if (!result.data.hasOwnProperty('errors')) {\n      yield put(ActionTypes.newPerformerSuccess(result.data));\n      yield put(ActionTypes.getPerformers());\n    } else {\n      throw new Error(result.data.errors[0].message);\n    }\n  } catch (error) {\n    yield put(ActionTypes.newPerformerError(error));\n  }\n}\n\nfunction* deletePerformer(action) {\n  try {\n    const graphqlQuery = {\n      query: `\n          mutation {\n            deletePerformer(\n              _id: \"${action._id}\", \n              )\n        }`\n    };\n    const result = yield call(Api.makePostRequest, graphqlQuery);\n\n    if (!result.data.hasOwnProperty('errors')) {\n      yield put(ActionTypes.getPerformers());\n    } else {\n      throw new Error(result.data.errors[0].message);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* editPerformer(action) {\n  try {\n    const graphqlQuery = {\n      query: `\n          mutation {\n            editPerformer(\n              _id: \"${action._id}\", \n              name: \"${action.name}\", \n              age: \"${action.age}\", \n              category: \"${action.category}\", \n              )\n        }`\n    };\n    yield call(Api.makePostRequest, graphqlQuery);\n    yield put(ActionTypes.getPerformers());\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport default function* authSaga() {\n  yield takeEvery(ActionTypes.ADD_NEW_PERFORMER, addNewPerformer);\n  yield takeEvery(ActionTypes.GET_PERFORMERS, getPerformers);\n  yield takeEvery(ActionTypes.DELETE_PERFORMER, deletePerformer);\n  yield takeEvery(ActionTypes.EDIT_PERFORMER, editPerformer);\n}","map":{"version":3,"sources":["/home/mirko/Desktop/mirkosoft/quant-backend-node/quant-frontend-react/src/redux/performers/sagas.js"],"names":["takeEvery","call","put","ActionTypes","Api","getPerformers","action","graphqlQuery","query","result","makePostRequest","data","hasOwnProperty","getPerformersSuccess","Error","errors","message","error","getPerformersError","addNewPerformer","name","age","category","newPerformerSuccess","newPerformerError","deletePerformer","_id","console","log","editPerformer","authSaga","ADD_NEW_PERFORMER","GET_PERFORMERS","DELETE_PERFORMER","EDIT_PERFORMER"],"mappings":"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","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\r\nimport * as ActionTypes from './actions';\r\nimport Api from '../../api/calls';\r\n\r\nfunction* getPerformers(action){\r\n  try{\r\n      const graphqlQuery = {\r\n          query: `{\r\n            getPerformers{\r\n              performers{\r\n                _id,\r\n                name,\r\n                age,\r\n                category\r\n              }\r\n            }\r\n          }`\r\n      };\r\n      const result = yield call(Api.makePostRequest, graphqlQuery);\r\n      if(!result.data.hasOwnProperty('errors')){\r\n        yield put(ActionTypes.getPerformersSuccess(result.data));\r\n      }else{\r\n        throw new Error(result.data.errors[0].message);\r\n      }\r\n  }catch(error){\r\n      yield put(ActionTypes.getPerformersError(error));\r\n  }\r\n}\r\n\r\nfunction* addNewPerformer(action){\r\n  try{\r\n      const graphqlQuery = {\r\n        query: `\r\n          mutation {\r\n            createPerformer(\r\n              name: \"${action.name}\", \r\n              age: \"${action.age}\",\r\n              category: \"${action.category}\"\r\n              )\r\n          {_id, name, age, category}\r\n        }`\r\n      };\r\n      const result = yield call(Api.makePostRequest, graphqlQuery);\r\n      if(!result.data.hasOwnProperty('errors')){\r\n        yield put(ActionTypes.newPerformerSuccess(result.data));\r\n        yield put(ActionTypes.getPerformers());\r\n      }else{\r\n        throw new Error(result.data.errors[0].message);\r\n      }\r\n  }catch(error){\r\n      yield put(ActionTypes.newPerformerError(error));\r\n  }\r\n}\r\n\r\nfunction* deletePerformer(action){\r\n  try{\r\n      const graphqlQuery = {\r\n        query: `\r\n          mutation {\r\n            deletePerformer(\r\n              _id: \"${action._id}\", \r\n              )\r\n        }`\r\n      };\r\n      const result = yield call(Api.makePostRequest, graphqlQuery);\r\n      if(!result.data.hasOwnProperty('errors')){\r\n        yield put(ActionTypes.getPerformers());\r\n      }else{\r\n        throw new Error(result.data.errors[0].message);\r\n      }\r\n  }catch(error){\r\n     console.log(error);\r\n  }\r\n}\r\n\r\nfunction* editPerformer(action){\r\n  try{\r\n      const graphqlQuery = {\r\n        query: `\r\n          mutation {\r\n            editPerformer(\r\n              _id: \"${action._id}\", \r\n              name: \"${action.name}\", \r\n              age: \"${action.age}\", \r\n              category: \"${action.category}\", \r\n              )\r\n        }`\r\n      };\r\n      yield call(Api.makePostRequest, graphqlQuery);\r\n      yield put(ActionTypes.getPerformers());\r\n  }catch(error){\r\n      console.log(error)\r\n  }\r\n}\r\n\r\n\r\nexport default function* authSaga() {\r\n   yield takeEvery(ActionTypes.ADD_NEW_PERFORMER, addNewPerformer);\r\n   yield takeEvery(ActionTypes.GET_PERFORMERS, getPerformers);\r\n   yield takeEvery(ActionTypes.DELETE_PERFORMER, deletePerformer);\r\n   yield takeEvery(ActionTypes.EDIT_PERFORMER, editPerformer);\r\n}"]},"metadata":{},"sourceType":"module"}