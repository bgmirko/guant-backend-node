{"ast":null,"code":"var _jsxFileName = \"/home/mirko/Desktop/mirkosoft/quant-backend-node/quant-frontend-react/src/containers/PerformersContainer.js\";\nimport React, { useEffect, useState } from 'react';\nimport compose from 'recompose/compose';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport { addNewPerformer, getPerformers, deletePerformer, editPerformer } from '../redux/performers/actions';\nimport { Button } from '@material-ui/core';\nimport SavePerformer from '../components/SavePerformer';\nimport ListOfPerformers from '../components/ListOfPerformers';\nconst styles = {\n  container: {\n    width: 400,\n    margin: '0 auto'\n  },\n  button: {\n    marginTop: 15\n  }\n};\n\nconst PerformersContainer = props => {\n  const [state, setState] = useState({\n    showInContainer: \"listOfPerformers\",\n    editPerformer: null\n  });\n  const {\n    classes\n  } = props;\n  useEffect(() => {\n    console.log(\"[PerformersContainer] component did mount\");\n    props.onGetPerformers();\n  }, []);\n\n  const handleSavePerformer = (e, {\n    _id,\n    name,\n    age,\n    category\n  }, mode) => {\n    e.preventDefault();\n\n    if (mode === \"save\") {\n      props.onAddNewPerformer(name, age, category);\n    } else if (mode === \"edit\") {\n      props.onEditPerformer(_id, name, age, category);\n    }\n\n    setState({ ...state,\n      showInContainer: \"listOfPerformers\",\n      editPerformer: null\n    });\n    props.onGetPerformers();\n  };\n\n  const handleEditPerformer = performer => {\n    setState({ ...state,\n      editPerformer: performer,\n      showInContainer: \"editPerformer\"\n    });\n  };\n\n  const handleDeletePerformer = _id => {\n    props.onDeletePerformer(_id);\n    props.onGetPerformers();\n  };\n\n  const changeViewHandle = viewType => {\n    setState({ ...state,\n      showInContainer: viewType\n    });\n  };\n\n  const getView = () => {\n    switch (state.showInContainer) {\n      case \"listOfPerformers\":\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(ListOfPerformers, {\n          performers: props.performers,\n          deletePerformer: handleDeletePerformer,\n          editPerformer: handleEditPerformer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }), React.createElement(Button, {\n          className: classes.button,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => changeViewHandle(\"addNewPerformer\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, \"Add New\"));\n\n      case \"addNewPerformer\":\n        return React.createElement(SavePerformer, {\n          onPerformerDataSubmit: handleSavePerformer,\n          changeViewHandle: viewType => changeViewHandle(viewType),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        });\n\n      case \"editPerformer\":\n        return React.createElement(SavePerformer, {\n          onPerformerDataSubmit: handleSavePerformer,\n          changeViewHandle: viewType => changeViewHandle(viewType),\n          performer: state.editPerformer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        });\n\n      default:\n        break;\n    }\n  };\n\n  const view = getView();\n  return React.createElement(\"div\", {\n    className: classes.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, props.user !== \"\" ? view : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"You need to login to see data on this page\"));\n};\n\nconst mapStateToProps = state => ({\n  performers: state.performers.performers,\n  user: state.auth.user.name\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onAddNewPerformer: (name, age, category) => dispatch(addNewPerformer(name, age, category)),\n  onGetPerformers: () => dispatch(getPerformers()),\n  onDeletePerformer: _id => dispatch(deletePerformer(_id)),\n  onEditPerformer: (_id, name, age, category) => dispatch(editPerformer(_id, name, age, category))\n});\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withStyles(styles))(PerformersContainer);","map":{"version":3,"sources":["/home/mirko/Desktop/mirkosoft/quant-backend-node/quant-frontend-react/src/containers/PerformersContainer.js"],"names":["React","useEffect","useState","compose","connect","withStyles","addNewPerformer","getPerformers","deletePerformer","editPerformer","Button","SavePerformer","ListOfPerformers","styles","container","width","margin","button","marginTop","PerformersContainer","props","state","setState","showInContainer","classes","console","log","onGetPerformers","handleSavePerformer","e","_id","name","age","category","mode","preventDefault","onAddNewPerformer","onEditPerformer","handleEditPerformer","performer","handleDeletePerformer","onDeletePerformer","changeViewHandle","viewType","getView","performers","view","user","mapStateToProps","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport compose from 'recompose/compose';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { addNewPerformer, getPerformers, deletePerformer, editPerformer } from '../redux/performers/actions'; \r\nimport { Button } from '@material-ui/core';\r\nimport SavePerformer from '../components/SavePerformer'\r\nimport ListOfPerformers from '../components/ListOfPerformers';\r\n\r\nconst styles = {\r\n    container: {\r\n        width: 400,\r\n        margin: '0 auto'\r\n    },\r\n    button: {\r\n        marginTop: 15\r\n    }\r\n}\r\n\r\nconst PerformersContainer = props => {\r\n\r\n    const [state, setState ] = useState({\r\n        showInContainer: \"listOfPerformers\",\r\n        editPerformer: null\r\n    })\r\n\r\n    const { classes } = props;\r\n\r\n    useEffect(() => { \r\n        console.log(\"[PerformersContainer] component did mount\");\r\n        props.onGetPerformers();\r\n    }, []);\r\n\r\n    const handleSavePerformer = (e, {_id, name, age, category}, mode) => {\r\n        e.preventDefault();\r\n        if(mode === \"save\"){\r\n            props.onAddNewPerformer(name, age, category);\r\n        }else if(mode === \"edit\"){\r\n            props.onEditPerformer(_id, name, age, category);\r\n        }\r\n        setState({\r\n            ...state,\r\n            showInContainer: \"listOfPerformers\",\r\n            editPerformer: null\r\n        })\r\n        props.onGetPerformers();\r\n    }\r\n\r\n    const handleEditPerformer = (performer) => {\r\n        setState({\r\n            ...state,\r\n            editPerformer: performer,\r\n            showInContainer: \"editPerformer\"\r\n        })\r\n    }\r\n\r\n    const handleDeletePerformer = (_id) => {\r\n        props.onDeletePerformer(_id);\r\n        props.onGetPerformers();\r\n    }\r\n\r\n    const changeViewHandle = (viewType) => {\r\n        setState({\r\n            ...state,\r\n            showInContainer: viewType\r\n        })\r\n    }\r\n    \r\n    const getView = () => {\r\n        switch(state.showInContainer){\r\n            case \"listOfPerformers\":\r\n                return (\r\n                    <div>\r\n                        <ListOfPerformers \r\n                            performers={props.performers}\r\n                            deletePerformer={handleDeletePerformer}\r\n                            editPerformer={handleEditPerformer}\r\n                        />\r\n                        <Button \r\n                            className={classes.button}\r\n                            variant=\"contained\" \r\n                            color=\"primary\" \r\n                            onClick={() => changeViewHandle(\"addNewPerformer\")}>\r\n                                Add New\r\n                        </Button>\r\n                    </div>\r\n                )\r\n            case \"addNewPerformer\":\r\n                return (\r\n                    <SavePerformer \r\n                        onPerformerDataSubmit={handleSavePerformer}\r\n                        changeViewHandle={(viewType) => changeViewHandle(viewType)}\r\n                    />\r\n                )\r\n            case \"editPerformer\":\r\n                return (\r\n                    <SavePerformer \r\n                        onPerformerDataSubmit={handleSavePerformer}\r\n                        changeViewHandle={(viewType) => changeViewHandle(viewType)}\r\n                        performer={state.editPerformer}\r\n                    />\r\n                )\r\n            default: break;\r\n        }\r\n    }\r\n    \r\n    const view = getView();\r\n\r\n    return(\r\n        <div className={classes.container}>\r\n            {props.user !== \"\" ?\r\n                view\r\n                :\r\n                <p>You need to login to see data on this page</p>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    performers: state.performers.performers,\r\n    user: state.auth.user.name\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onAddNewPerformer: (name, age, category) => dispatch(addNewPerformer(name, age, category)),\r\n    onGetPerformers: () => dispatch(getPerformers()),\r\n    onDeletePerformer: (_id) => dispatch(deletePerformer(_id)),\r\n    onEditPerformer: (_id, name, age, category) => dispatch(editPerformer(_id, name, age, category))\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withStyles(styles)\r\n)(PerformersContainer);"]},"metadata":{},"sourceType":"module"}