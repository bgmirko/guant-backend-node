{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport * as ActionTypes from './actions';\nimport Api from '../../api/calls';\n\nfunction* getUser(action) {\n  try {\n    const graphqlQuery = {\n      query: `{getUser(email: \"${action.email}\", password: \"${action.password}\"){_id, name, email, userName}}`\n    };\n    const result = yield call(Api.makePostRequest, graphqlQuery);\n\n    if (!result.data.hasOwnProperty('errors')) {\n      yield put(ActionTypes.getUserSuccess(result.data));\n    } else {\n      throw new Error(result.data.errors[0].message);\n    }\n  } catch (error) {\n    yield put(ActionTypes.getUserError(error));\n  }\n}\n\nfunction* addNewUser(action) {\n  try {\n    const graphqlQuery = {\n      query: `\n          mutation {\n            createUser(\n              email: \"${action.email}\", \n              password: \"${action.password}\",\n              name: \"${action.name}\", \n              userName: \"${action.userName}\",\n              )\n          {_id, name, email, userName}\n        }`\n    };\n    const result = yield call(Api.makePostRequest, graphqlQuery);\n\n    if (!result.data.hasOwnProperty('errors')) {\n      yield put(ActionTypes.newUserSuccess(result.data));\n    } else {\n      throw new Error(result.data.errors[0].message);\n    }\n  } catch (error) {\n    yield put(ActionTypes.newUserError(error));\n  }\n}\n\nexport default function* authSaga() {\n  yield takeEvery(ActionTypes.GET_USER, getUser);\n  yield takeEvery(ActionTypes.ADD_NEW_USER, addNewUser);\n}","map":{"version":3,"sources":["/home/mirko/Desktop/mirkosoft/quant-backend-node/quant-frontend-react/src/redux/auth/sagas.js"],"names":["takeEvery","call","put","ActionTypes","Api","getUser","action","graphqlQuery","query","email","password","result","makePostRequest","data","hasOwnProperty","getUserSuccess","Error","errors","message","error","getUserError","addNewUser","name","userName","newUserSuccess","newUserError","authSaga","GET_USER","ADD_NEW_USER"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,OAAO,KAAKC,WAAZ,MAA6B,WAA7B;AACA,OAAOC,GAAP,MAAgB,iBAAhB;;AAEA,UAAUC,OAAV,CAAkBC,MAAlB,EAAyB;AACvB,MAAG;AACC,UAAMC,YAAY,GAAG;AACjBC,MAAAA,KAAK,EAAG,oBAAmBF,MAAM,CAACG,KAAM,iBAAgBH,MAAM,CAACI,QAAS;AADvD,KAArB;AAGA,UAAMC,MAAM,GAAG,MAAMV,IAAI,CAACG,GAAG,CAACQ,eAAL,EAAsBL,YAAtB,CAAzB;;AACA,QAAG,CAACI,MAAM,CAACE,IAAP,CAAYC,cAAZ,CAA2B,QAA3B,CAAJ,EAAyC;AACvC,YAAMZ,GAAG,CAACC,WAAW,CAACY,cAAZ,CAA2BJ,MAAM,CAACE,IAAlC,CAAD,CAAT;AACD,KAFD,MAEK;AACH,YAAM,IAAIG,KAAJ,CAAUL,MAAM,CAACE,IAAP,CAAYI,MAAZ,CAAmB,CAAnB,EAAsBC,OAAhC,CAAN;AACD;AACJ,GAVD,CAUC,OAAMC,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACC,WAAW,CAACiB,YAAZ,CAAyBD,KAAzB,CAAD,CAAT;AACH;AACF;;AAED,UAAUE,UAAV,CAAqBf,MAArB,EAA4B;AAC1B,MAAG;AACC,UAAMC,YAAY,GAAG;AACnBC,MAAAA,KAAK,EAAG;;;wBAGQF,MAAM,CAACG,KAAM;2BACVH,MAAM,CAACI,QAAS;uBACpBJ,MAAM,CAACgB,IAAK;2BACRhB,MAAM,CAACiB,QAAS;;;;AAPhB,KAArB;AAYA,UAAMZ,MAAM,GAAG,MAAMV,IAAI,CAACG,GAAG,CAACQ,eAAL,EAAsBL,YAAtB,CAAzB;;AACA,QAAG,CAACI,MAAM,CAACE,IAAP,CAAYC,cAAZ,CAA2B,QAA3B,CAAJ,EAAyC;AACvC,YAAMZ,GAAG,CAACC,WAAW,CAACqB,cAAZ,CAA2Bb,MAAM,CAACE,IAAlC,CAAD,CAAT;AACD,KAFD,MAEK;AACH,YAAM,IAAIG,KAAJ,CAAUL,MAAM,CAACE,IAAP,CAAYI,MAAZ,CAAmB,CAAnB,EAAsBC,OAAhC,CAAN;AACD;AACJ,GAnBD,CAmBC,OAAMC,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACC,WAAW,CAACsB,YAAZ,CAAyBN,KAAzB,CAAD,CAAT;AACH;AACF;;AAGD,eAAe,UAAUO,QAAV,GAAqB;AACjC,QAAM1B,SAAS,CAACG,WAAW,CAACwB,QAAb,EAAuBtB,OAAvB,CAAf;AACA,QAAML,SAAS,CAACG,WAAW,CAACyB,YAAb,EAA2BP,UAA3B,CAAf;AACF","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\r\nimport * as ActionTypes from './actions';\r\nimport Api from '../../api/calls';\r\n\r\nfunction* getUser(action){\r\n  try{\r\n      const graphqlQuery = {\r\n          query: `{getUser(email: \"${action.email}\", password: \"${action.password}\"){_id, name, email, userName}}`\r\n      };\r\n      const result = yield call(Api.makePostRequest, graphqlQuery);\r\n      if(!result.data.hasOwnProperty('errors')){\r\n        yield put(ActionTypes.getUserSuccess(result.data));\r\n      }else{\r\n        throw new Error(result.data.errors[0].message);\r\n      }\r\n  }catch(error){\r\n      yield put(ActionTypes.getUserError(error));\r\n  }\r\n}\r\n\r\nfunction* addNewUser(action){\r\n  try{\r\n      const graphqlQuery = {\r\n        query: `\r\n          mutation {\r\n            createUser(\r\n              email: \"${action.email}\", \r\n              password: \"${action.password}\",\r\n              name: \"${action.name}\", \r\n              userName: \"${action.userName}\",\r\n              )\r\n          {_id, name, email, userName}\r\n        }`\r\n      };\r\n      const result = yield call(Api.makePostRequest, graphqlQuery);\r\n      if(!result.data.hasOwnProperty('errors')){\r\n        yield put(ActionTypes.newUserSuccess(result.data));\r\n      }else{\r\n        throw new Error(result.data.errors[0].message);\r\n      }\r\n  }catch(error){\r\n      yield put(ActionTypes.newUserError(error));\r\n  }\r\n}\r\n\r\n\r\nexport default function* authSaga() {\r\n   yield takeEvery(ActionTypes.GET_USER, getUser);\r\n   yield takeEvery(ActionTypes.ADD_NEW_USER, addNewUser);\r\n}"]},"metadata":{},"sourceType":"module"}