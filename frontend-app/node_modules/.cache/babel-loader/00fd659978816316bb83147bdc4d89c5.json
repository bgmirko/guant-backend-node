{"ast":null,"code":"import * as ActionTypes from './actions';\nconst initialState = {\n  performers: [],\n  dataLoading: false\n};\n\nconst performersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.GET_PERFORMERS:\n      return { ...state,\n        dataLoading: true\n      };\n\n    case ActionTypes.GET_PERFORMERS_SUCCESS:\n      const performers = action.payload.data.getPerformers.performers;\n      return { ...state,\n        performers: performers,\n        dataLoading: false\n      };\n\n    case ActionTypes.GET_PERFORMERS_ERROR:\n      return { ...state,\n        performers: [],\n        dataLoading: false,\n        errorMessage: action.payload.message\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default performersReducer;","map":{"version":3,"sources":["/home/mirko/Desktop/mirkosoft/quant-backend-node/quant-frontend-react/src/redux/performers/reducer.js"],"names":["ActionTypes","initialState","performers","dataLoading","performersReducer","state","action","type","GET_PERFORMERS","GET_PERFORMERS_SUCCESS","payload","data","getPerformers","GET_PERFORMERS_ERROR","errorMessage","message"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,WAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,WAAW,EAAE;AAFI,CAArB;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAW,CAACQ,cAAjB;AACI,aAAO,EACH,GAAGH,KADA;AAEHF,QAAAA,WAAW,EAAE;AAFV,OAAP;;AAIJ,SAAKH,WAAW,CAACS,sBAAjB;AACI,YAAMP,UAAU,GAAGI,MAAM,CAACI,OAAP,CAAeC,IAAf,CAAoBC,aAApB,CAAkCV,UAArD;AACA,aAAO,EACH,GAAGG,KADA;AAEHH,QAAAA,UAAU,EAAEA,UAFT;AAGHC,QAAAA,WAAW,EAAE;AAHV,OAAP;;AAKJ,SAAKH,WAAW,CAACa,oBAAjB;AACI,aAAO,EACH,GAAGR,KADA;AAEHH,QAAAA,UAAU,EAAE,EAFT;AAGHC,QAAAA,WAAW,EAAE,KAHV;AAIHW,QAAAA,YAAY,EAAER,MAAM,CAACI,OAAP,CAAeK;AAJ1B,OAAP;;AAMJ;AACI,aAAO,EAAE,GAAGV;AAAL,OAAP;AArBR;AAwBH,CAzBD;;AA2BA,eAAeD,iBAAf","sourcesContent":["import * as ActionTypes from './actions';\r\n\r\nconst initialState = {\r\n    performers: [],\r\n    dataLoading: false\r\n }\r\n\r\nconst performersReducer = (state = initialState, action) => { \r\n    switch (action.type) { \r\n        case ActionTypes.GET_PERFORMERS:\r\n            return {\r\n                ...state,\r\n                dataLoading: true\r\n            };  \r\n        case ActionTypes.GET_PERFORMERS_SUCCESS:\r\n            const performers = action.payload.data.getPerformers.performers;\r\n            return {\r\n                ...state,\r\n                performers: performers,\r\n                dataLoading: false\r\n            };   \r\n        case ActionTypes.GET_PERFORMERS_ERROR:\r\n            return {\r\n                ...state,\r\n                performers: [],\r\n                dataLoading: false,\r\n                errorMessage: action.payload.message\r\n            };\r\n        default:\r\n            return { ...state };\r\n    }\r\n\r\n}\r\n\r\nexport default performersReducer;"]},"metadata":{},"sourceType":"module"}